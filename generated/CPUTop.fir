;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit CPUTop : 
  module ProgramCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip stop : UInt<1>, flip jump : UInt<1>, flip run : UInt<1>, flip programCounterJump : UInt<16>, programCounter : UInt<16>}
    
    reg finReg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[ProgramCounter.scala 15:23]
    node _T = eq(io.run, UInt<1>("h00")) @[ProgramCounter.scala 17:29]
    node _T_1 = or(io.stop, _T) @[ProgramCounter.scala 17:25]
    node _T_2 = add(finReg, UInt<1>("h01")) @[ProgramCounter.scala 17:90]
    node _T_3 = tail(_T_2, 1) @[ProgramCounter.scala 17:90]
    node _T_4 = mux(io.jump, io.programCounterJump, _T_3) @[ProgramCounter.scala 17:50]
    node _T_5 = mux(_T_1, finReg, _T_4) @[ProgramCounter.scala 17:16]
    finReg <= _T_5 @[ProgramCounter.scala 17:10]
    io.programCounter <= finReg @[ProgramCounter.scala 18:21]
    
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 20:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 22:37]
      io.testerDataRead <= _T @[DataMemory.scala 22:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 23:17]
      when io.testerWriteEnable : @[DataMemory.scala 24:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 26:25]
        skip @[DataMemory.scala 24:32]
      skip @[DataMemory.scala 20:24]
    else : @[DataMemory.scala 28:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 30:31]
      io.dataRead <= _T_2 @[DataMemory.scala 30:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 31:23]
      when io.writeEnable : @[DataMemory.scala 32:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 34:19]
        skip @[DataMemory.scala 32:26]
      skip @[DataMemory.scala 28:16]
    
  module ProgramMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, instructionRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[ProgramMemory.scala 16:20]
    when io.testerEnable : @[ProgramMemory.scala 18:24]
      read mport _T = memory[io.testerAddress], clock @[ProgramMemory.scala 20:37]
      io.testerDataRead <= _T @[ProgramMemory.scala 20:23]
      io.instructionRead <= UInt<32>("h00") @[ProgramMemory.scala 21:24]
      when io.testerWriteEnable : @[ProgramMemory.scala 22:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[ProgramMemory.scala 24:25]
        skip @[ProgramMemory.scala 22:32]
      skip @[ProgramMemory.scala 18:24]
    else : @[ProgramMemory.scala 26:16]
      read mport _T_2 = memory[io.address], clock @[ProgramMemory.scala 28:38]
      io.instructionRead <= _T_2 @[ProgramMemory.scala 28:24]
      io.testerDataRead <= UInt<32>("h00") @[ProgramMemory.scala 29:23]
      skip @[ProgramMemory.scala 26:16]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip readReg1 : UInt<5>, flip readReg2 : UInt<5>, flip regWrite : UInt<1>, flip writeData : UInt<32>, flip writeReg : UInt<5>, readData1 : UInt<32>, readData2 : UInt<32>}
    
    reg registerFile : UInt<32>[16], clock @[RegisterFile.scala 20:27]
    node _T = bits(io.readReg1, 3, 0)
    io.readData1 <= registerFile[_T] @[RegisterFile.scala 22:16]
    node _T_1 = bits(io.readReg2, 3, 0)
    io.readData2 <= registerFile[_T_1] @[RegisterFile.scala 23:16]
    when io.regWrite : @[RegisterFile.scala 24:22]
      node _T_2 = bits(io.writeReg, 3, 0)
      registerFile[_T_2] <= io.writeData @[RegisterFile.scala 25:31]
      skip @[RegisterFile.scala 24:22]
    
  module ControlUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<6>, JR : UInt<1>, jumpEnable : UInt<1>, memToReg : UInt<1>, memWrite : UInt<1>, ALUOpcode : UInt<4>, ALUSrc : UInt<1>, regWrite : UInt<1>, regDest : UInt<1>, stop : UInt<1>}
    
    io.ALUOpcode <= UInt<1>("h00") @[ControlUnit.scala 20:16]
    io.JR <= UInt<1>("h00") @[ControlUnit.scala 21:9]
    io.jumpEnable <= UInt<1>("h00") @[ControlUnit.scala 22:17]
    io.ALUSrc <= UInt<1>("h00") @[ControlUnit.scala 23:13]
    io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 24:15]
    io.memToReg <= UInt<1>("h00") @[ControlUnit.scala 25:15]
    io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 26:15]
    io.regDest <= UInt<1>("h00") @[ControlUnit.scala 27:14]
    io.stop <= UInt<1>("h00") @[ControlUnit.scala 28:11]
    node _T = eq(UInt<1>("h00"), io.opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.regWrite <= UInt<1>("h00") @[ControlUnit.scala 32:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.ALUOpcode <= UInt<1>("h01") @[ControlUnit.scala 35:20]
        io.regDest <= UInt<1>("h01") @[ControlUnit.scala 36:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.ALUOpcode <= UInt<2>("h02") @[ControlUnit.scala 39:20]
          io.regDest <= UInt<1>("h01") @[ControlUnit.scala 40:18]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.ALUOpcode <= UInt<2>("h03") @[ControlUnit.scala 43:20]
            io.regDest <= UInt<1>("h01") @[ControlUnit.scala 44:18]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h04"), io.opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.ALUOpcode <= UInt<3>("h04") @[ControlUnit.scala 47:20]
              io.regDest <= UInt<1>("h01") @[ControlUnit.scala 48:18]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h05"), io.opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.ALUOpcode <= UInt<3>("h05") @[ControlUnit.scala 51:20]
                io.regDest <= UInt<1>("h01") @[ControlUnit.scala 52:18]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<3>("h06"), io.opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.ALUOpcode <= UInt<1>("h01") @[ControlUnit.scala 55:20]
                  io.ALUSrc <= UInt<1>("h01") @[ControlUnit.scala 56:17]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<3>("h07"), io.opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.ALUOpcode <= UInt<2>("h02") @[ControlUnit.scala 59:20]
                    io.ALUSrc <= UInt<1>("h01") @[ControlUnit.scala 60:17]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<4>("h08"), io.opcode) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      io.ALUOpcode <= UInt<3>("h05") @[ControlUnit.scala 63:20]
                      io.ALUSrc <= UInt<1>("h01") @[ControlUnit.scala 64:17]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_9 = eq(UInt<4>("h09"), io.opcode) @[Conditional.scala 37:30]
                      when _T_9 : @[Conditional.scala 39:67]
                        io.ALUOpcode <= UInt<3>("h07") @[ControlUnit.scala 67:20]
                        io.ALUSrc <= UInt<1>("h01") @[ControlUnit.scala 68:17]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_10 = eq(UInt<4>("h0a"), io.opcode) @[Conditional.scala 37:30]
                        when _T_10 : @[Conditional.scala 39:67]
                          io.ALUOpcode <= UInt<3>("h06") @[ControlUnit.scala 71:20]
                          io.memToReg <= UInt<1>("h01") @[ControlUnit.scala 72:19]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_11 = eq(UInt<4>("h0b"), io.opcode) @[Conditional.scala 37:30]
                          when _T_11 : @[Conditional.scala 39:67]
                            io.ALUOpcode <= UInt<3>("h07") @[ControlUnit.scala 75:20]
                            io.memWrite <= UInt<1>("h01") @[ControlUnit.scala 76:19]
                            io.regWrite <= UInt<1>("h00") @[ControlUnit.scala 77:19]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_12 = eq(UInt<4>("h0c"), io.opcode) @[Conditional.scala 37:30]
                            when _T_12 : @[Conditional.scala 39:67]
                              io.jumpEnable <= UInt<1>("h01") @[ControlUnit.scala 80:21]
                              io.regWrite <= UInt<1>("h00") @[ControlUnit.scala 81:19]
                              io.JR <= UInt<1>("h01") @[ControlUnit.scala 82:13]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_13 = eq(UInt<4>("h0d"), io.opcode) @[Conditional.scala 37:30]
                              when _T_13 : @[Conditional.scala 39:67]
                                io.ALUOpcode <= UInt<4>("h08") @[ControlUnit.scala 85:20]
                                io.jumpEnable <= UInt<1>("h01") @[ControlUnit.scala 86:21]
                                io.regWrite <= UInt<1>("h00") @[ControlUnit.scala 87:19]
                                skip @[Conditional.scala 39:67]
                              else : @[Conditional.scala 39:67]
                                node _T_14 = eq(UInt<4>("h0e"), io.opcode) @[Conditional.scala 37:30]
                                when _T_14 : @[Conditional.scala 39:67]
                                  io.ALUOpcode <= UInt<4>("h09") @[ControlUnit.scala 90:20]
                                  io.jumpEnable <= UInt<1>("h01") @[ControlUnit.scala 91:21]
                                  io.regWrite <= UInt<1>("h00") @[ControlUnit.scala 92:19]
                                  skip @[Conditional.scala 39:67]
                                else : @[Conditional.scala 39:67]
                                  node _T_15 = eq(UInt<4>("h0f"), io.opcode) @[Conditional.scala 37:30]
                                  when _T_15 : @[Conditional.scala 39:67]
                                    io.ALUOpcode <= UInt<2>("h02") @[ControlUnit.scala 95:20]
                                    io.jumpEnable <= UInt<1>("h01") @[ControlUnit.scala 96:21]
                                    io.regWrite <= UInt<1>("h00") @[ControlUnit.scala 97:19]
                                    skip @[Conditional.scala 39:67]
                                  else : @[Conditional.scala 39:67]
                                    node _T_16 = eq(UInt<5>("h010"), io.opcode) @[Conditional.scala 37:30]
                                    when _T_16 : @[Conditional.scala 39:67]
                                      io.stop <= UInt<1>("h01") @[ControlUnit.scala 100:15]
                                      skip @[Conditional.scala 39:67]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip operand1 : SInt<32>, flip operand2 : SInt<32>, flip sel : UInt<4>, result : SInt<32>, compResult : UInt<1>}
    
    io.result <= asSInt(UInt<1>("h00")) @[ALU.scala 28:13]
    io.compResult <= UInt<1>("h00") @[ALU.scala 30:17]
    node _T = eq(UInt<1>("h01"), io.sel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.operand1, io.operand2) @[ALU.scala 33:32]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 33:32]
      node _T_3 = asSInt(_T_2) @[ALU.scala 33:32]
      io.result <= _T_3 @[ALU.scala 33:17]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<2>("h02"), io.sel) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = sub(io.operand1, io.operand2) @[ALU.scala 36:31]
        node _T_6 = tail(_T_5, 1) @[ALU.scala 36:31]
        node _T_7 = asSInt(_T_6) @[ALU.scala 36:31]
        io.result <= _T_7 @[ALU.scala 37:17]
        node _T_8 = eq(_T_7, asSInt(UInt<1>("h00"))) @[ALU.scala 38:28]
        io.compResult <= _T_8 @[ALU.scala 38:21]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_9 = eq(UInt<2>("h03"), io.sel) @[Conditional.scala 37:30]
        when _T_9 : @[Conditional.scala 39:67]
          node _T_10 = or(io.operand1, io.operand2) @[ALU.scala 41:32]
          node _T_11 = asSInt(_T_10) @[ALU.scala 41:32]
          io.result <= _T_11 @[ALU.scala 41:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_12 = eq(UInt<3>("h04"), io.sel) @[Conditional.scala 37:30]
          when _T_12 : @[Conditional.scala 39:67]
            node _T_13 = and(io.operand1, io.operand2) @[ALU.scala 44:32]
            node _T_14 = asSInt(_T_13) @[ALU.scala 44:32]
            io.result <= _T_14 @[ALU.scala 44:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_15 = eq(UInt<3>("h05"), io.sel) @[Conditional.scala 37:30]
            when _T_15 : @[Conditional.scala 39:67]
              node _T_16 = mul(io.operand1, io.operand2) @[ALU.scala 47:32]
              io.result <= _T_16 @[ALU.scala 47:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_17 = eq(UInt<3>("h06"), io.sel) @[Conditional.scala 37:30]
              when _T_17 : @[Conditional.scala 39:67]
                io.result <= io.operand1 @[ALU.scala 50:17]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_18 = eq(UInt<3>("h07"), io.sel) @[Conditional.scala 37:30]
                when _T_18 : @[Conditional.scala 39:67]
                  io.result <= io.operand2 @[ALU.scala 53:17]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_19 = eq(UInt<4>("h08"), io.sel) @[Conditional.scala 37:30]
                  when _T_19 : @[Conditional.scala 39:67]
                    node _T_20 = sub(io.operand1, io.operand2) @[ALU.scala 56:31]
                    node _T_21 = tail(_T_20, 1) @[ALU.scala 56:31]
                    node _T_22 = asSInt(_T_21) @[ALU.scala 56:31]
                    io.result <= _T_22 @[ALU.scala 57:17]
                    node _T_23 = gt(_T_22, asSInt(UInt<1>("h00"))) @[ALU.scala 58:29]
                    io.compResult <= _T_23 @[ALU.scala 58:21]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_24 = eq(UInt<4>("h09"), io.sel) @[Conditional.scala 37:30]
                    when _T_24 : @[Conditional.scala 39:67]
                      node _T_25 = sub(io.operand1, io.operand2) @[ALU.scala 61:31]
                      node _T_26 = tail(_T_25, 1) @[ALU.scala 61:31]
                      node _T_27 = asSInt(_T_26) @[ALU.scala 61:31]
                      io.result <= _T_27 @[ALU.scala 62:17]
                      node _T_28 = neq(_T_27, asSInt(UInt<1>("h00"))) @[ALU.scala 63:28]
                      io.compResult <= _T_28 @[ALU.scala 63:21]
                      skip @[Conditional.scala 39:67]
    
  module CPUTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip run : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>, flip testerProgMemEnable : UInt<1>, flip testerProgMemAddress : UInt<16>, testerProgMemDataRead : UInt<32>, flip testerProgMemWriteEnable : UInt<1>, flip testerProgMemDataWrite : UInt<32>}
    
    inst programCounter of ProgramCounter @[CPUTop.scala 23:30]
    programCounter.clock <= clock
    programCounter.reset <= reset
    inst dataMemory of DataMemory @[CPUTop.scala 24:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst programMemory of ProgramMemory @[CPUTop.scala 25:29]
    programMemory.clock <= clock
    programMemory.reset <= reset
    inst registerFile of RegisterFile @[CPUTop.scala 26:28]
    registerFile.clock <= clock
    registerFile.reset <= reset
    inst controlUnit of ControlUnit @[CPUTop.scala 27:27]
    controlUnit.clock <= clock
    controlUnit.reset <= reset
    inst alu of ALU @[CPUTop.scala 28:19]
    alu.clock <= clock
    alu.reset <= reset
    programCounter.io.run <= io.run @[CPUTop.scala 31:25]
    programCounter.io.stop <= controlUnit.io.stop @[CPUTop.scala 32:26]
    node _T = and(controlUnit.io.jumpEnable, alu.io.compResult) @[CPUTop.scala 33:77]
    node _T_1 = or(controlUnit.io.JR, _T) @[CPUTop.scala 33:47]
    programCounter.io.jump <= _T_1 @[CPUTop.scala 33:26]
    node _T_2 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 34:75]
    programCounter.io.programCounterJump <= _T_2 @[CPUTop.scala 34:40]
    programMemory.io.address <= programCounter.io.programCounter @[CPUTop.scala 42:28]
    node _T_3 = bits(programMemory.io.instructionRead, 31, 26) @[CPUTop.scala 46:60]
    controlUnit.io.opcode <= _T_3 @[CPUTop.scala 46:25]
    node _T_4 = bits(programMemory.io.instructionRead, 25, 21) @[CPUTop.scala 50:63]
    registerFile.io.writeReg <= _T_4 @[CPUTop.scala 50:28]
    node _T_5 = bits(programMemory.io.instructionRead, 20, 16) @[CPUTop.scala 51:63]
    registerFile.io.readReg1 <= _T_5 @[CPUTop.scala 51:28]
    node _T_6 = bits(programMemory.io.instructionRead, 15, 11) @[CPUTop.scala 52:91]
    node _T_7 = bits(programMemory.io.instructionRead, 25, 21) @[CPUTop.scala 52:132]
    node _T_8 = mux(controlUnit.io.regDest, _T_6, _T_7) @[CPUTop.scala 52:34]
    registerFile.io.readReg2 <= _T_8 @[CPUTop.scala 52:28]
    node _T_9 = asSInt(dataMemory.io.dataRead) @[CPUTop.scala 53:90]
    node _T_10 = mux(controlUnit.io.memToReg, _T_9, alu.io.result) @[CPUTop.scala 53:35]
    node _T_11 = asUInt(_T_10) @[CPUTop.scala 53:115]
    registerFile.io.writeData <= _T_11 @[CPUTop.scala 53:29]
    registerFile.io.regWrite <= controlUnit.io.regWrite @[CPUTop.scala 54:28]
    node _T_12 = asSInt(registerFile.io.readData1) @[CPUTop.scala 57:54]
    alu.io.operand1 <= _T_12 @[CPUTop.scala 57:19]
    node _T_13 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 58:81]
    node _T_14 = or(_T_13, UInt<32>("h00")) @[CPUTop.scala 58:88]
    node _T_15 = mux(controlUnit.io.ALUSrc, _T_14, registerFile.io.readData2) @[CPUTop.scala 58:25]
    node _T_16 = asSInt(_T_15) @[CPUTop.scala 58:128]
    alu.io.operand2 <= _T_16 @[CPUTop.scala 58:19]
    alu.io.sel <= controlUnit.io.ALUOpcode @[CPUTop.scala 59:14]
    node _T_17 = asUInt(alu.io.result) @[CPUTop.scala 62:42]
    dataMemory.io.address <= _T_17 @[CPUTop.scala 62:25]
    dataMemory.io.dataWrite <= registerFile.io.readData1 @[CPUTop.scala 63:27]
    dataMemory.io.writeEnable <= controlUnit.io.memWrite @[CPUTop.scala 64:29]
    io.done <= controlUnit.io.stop @[CPUTop.scala 68:11]
    programMemory.io.testerAddress <= io.testerProgMemAddress @[CPUTop.scala 71:34]
    io.testerProgMemDataRead <= programMemory.io.testerDataRead @[CPUTop.scala 72:28]
    programMemory.io.testerDataWrite <= io.testerProgMemDataWrite @[CPUTop.scala 73:36]
    programMemory.io.testerEnable <= io.testerProgMemEnable @[CPUTop.scala 74:33]
    programMemory.io.testerWriteEnable <= io.testerProgMemWriteEnable @[CPUTop.scala 75:38]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[CPUTop.scala 77:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[CPUTop.scala 78:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[CPUTop.scala 79:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[CPUTop.scala 80:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[CPUTop.scala 81:35]
    
