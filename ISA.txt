LI R0 0                 ; constant 0
LI R3 19                ; constant 19
LI R15 255              ; constant 255
SUB R1 R1 R1            ; x = 0
JGT R1 R3 50            ; for(x from 0 to 19)
    SUB R2 R2 R2            ; y = 0   
    JGT R2 R3 49            ; for(y from 0 to 19)
        MULI R4 R2 20       ; address_out = y * 20    
        ADD R4 R4 R1        ; address_out = address_out + x
        ADDI R4 R4 400      ; address_out = adress_out + 400   
        JEQ R1 R0 16        ; if (x == 0) then goto 16
        JEQ R2 R0 16        ; if (x == 0) then goto 16
        JEQ R1 R3 16        ; if (x == 19) then goto 16
        JEQ R2 R3 16        ; if (x == 19) then goto 16
        JR 18               ; else goto 18
            SD R4 R0            ; value_out = memory(adress_out) = 0
            JR 47               ; continue - goto 47
        SUBI R5 R4 400          ; address_in = address_out - 400
        LD R6 R5            ; value_in = memory(address_in)   
        JNEQ R6 R0 23       ; if(value_in == 0) ;MULI R7
            SD R4 R0                ; value_out = 0     
            JR 47
        MULI R7 R2 20           ; address_in_Left = y * 20   
        SUBI R11 R1 1           ; reft = (x-1) 
        ADD R7 R7 R11           ; address_in_Left = address_in_Left + reft 
        LD R7 R7            ; ValueIn_Left = memory(address_in_Left)
        MULI R8 R2 20           ; address_in_Right = y * 20   
        ADDI R12 R1 1           ; right = (x+1)     
        ADD R8 R8 R12           ; address_in_Right = address_in_Right + right
        LD R8 R8            ; ValueIn_Right = memory(address_in_Right)  
        SUBI R13 R2 1           ; down = (y-1)   
        MULI R9 R13 20          ; down = down * 20
        ADD R9 R9 R1            ; address_in_Down = down + x
        LD R9 R9            ; ValueIn_Down = memory(address_in_Down) 
        ADDI R14 R2 1           ; up = (y+1)
        MULI R10 R14 20         ; up = up * 20
        ADD R10 R10 R1          ; address_in_Up = up + x 
        LD R10 R10          ; ValueIn_Up = memory(address_in_Up)
            JEQ R7 R0 44         ; if (ValueIn_Left == 0) then goto 44
            JEQ R8 R0 44         ; if (ValueIn_Right == 0) then goto 44
            JEQ R9 R0 44         ; if (ValueIn_Down == 0) then goto 44
            JEQ R10 R0 44        ; if (ValueIn_Up == 0) then goto 44
            JR 46                ; else goto 46
            SD R4 R0             ; value_out = memory(address_out) = 0
            JR 47                ; goto 47 and skip 46
            SD R4 R15            ; value_out = 255 
    ADDI R2 R2 1           ; increment y = y + 1
    JR 7 ;                 ; goto 7 and repeat inner for-loop
ADDI R1 R1 1       ; increment x = x + 1
JR 5               ; goto 5 and repeat outer for-loop
END                ; stop program

___________________________________________________________________________________________________
Instruction-Set Architecture (ISA)

Arithmetic and Logic:
// Subtraction              SUB R1 R2 R3    ;     R1 = R2 - R3 
// Multiplication           MUL R1, R2, R3  ;     R1 = R2 * R3
// Immediate Add.           ADDI R1 R2 4    ;     R1 = R2 + 4
// immidiate Sub.           SUBI R1 R2 5    ;     R1 = R2 - 5
// immidiate Mul.           MULI R1 R2 6    ;     R1 = R2 * 6

Data transfer:
// Load immidiate           LI R1 6         ;     R1 = 6
// Load data                LD R1, R2       ;     R1 = memory(R2)
// Store data               SD R1, R2       ;     memory(R1) = R2 


Control and Flow:
// Jump                     JR 7            ;     goto inst. 7
// Jump if greater than     JGT R2 R3 10    ;     if(R2>R3) goto inst. 10
// Jump if equal            JEQ R1 R2 20    ;     if (R1==R2) goto inst. 20
// Jump if not equal        JNEQ R2 R3 8    ;     if (R2 != R3) goto inst. 8
// END                                      ;     stop program

