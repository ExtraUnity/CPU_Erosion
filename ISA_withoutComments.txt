LI R0 0                     
LI R3 19                  
LI R15 255                     
// Outer for-loop start
SUB R1 R1 R1                  
JGT R1 R3 75                 
    // Inner-loop start
    SUB R2 R2 R2           
    JGT R2 R3 71             
        MULI R4 R2 20           
        ADD R4 R4 R1            
        ADDI R4 R4 400         
    
    //Processing border pixel   
        JEQ R1 R0 22           
        JEQ R2 R0 22          
        JEQ R1 R3 22           
        JEQ R2 R3 22          
        JR 24                  
        // Black pixel     
            SD R0 R4             

    // Fetching the memory address of in_image(x,y) into R5     
        MULI R5 R2 20         
        ADD R5 R4 R1       
        LD R6 R5               


    // Processing inner pixel "if"
        JNEQ R6 R0 35          
            SD R0 R4             
    
    // Processing inner pixel "else"
        // Fetching the values of neighboring pixel in input image into Registers [7; 10]
        MULI R7 R2 20          
        SUBI R11 R1 1         
        ADD R7 R7 R11         
        LD R7 R7            
        
        MULI R8 R2 20         
        ADDI R12 R1 1           
        ADD R8 R8 R12          
        LD R8 R8              

        SUBI R13 R2 1          
        MULI R9 R13 20          
        ADD R9 R9 R1            
        LD R9 R9              

        SUBI R14 R2 1        
        MULI R10 R14 20        
        ADD R10 R10 R1        
        LD R10 R10           
        
        // White pixel, checking neighboring pixels "If"
            JEQ R7 R0 64        
            JEQ R8 R0 64        
            JEQ R9 R0 64        
            JEQ R10 R0 64      
            JR 66              
            //Erode
            SD R0 R4            
            JR 68               
            //Do not erode
            SD R4 R15           
            
    ADDI R2 R2 1               
    JR 9
    // Inner for-loop end
   
ADDI R1 R1 1 
JR 6
// Outer for-loop end (Done)
END

___________________________________________________________________________________________________
Instruction-Set Architecture (ISA)

Arithmetic and Logic:
// Subtraction              SUB R1 R2 R3    ;     R1 = R2 - R3 
// Multiplication           MUL R1, R2, R3  ;     R1 = R2 * R3
// Immediate Add.           ADDI R1 R2 4    ;     R1 = R2 + 4
// immidiate Sub.           SUBI R1 R2 5    ;     R1 = R2 - 5
// immidiate Mul.           MULI R1 R2 6    ;     R1 = R2 * 6

Data transfer:
// Load immidiate           LI R1 6         ;     R1 = 6
// Load data                LD R1, R2       ;     R1 = memory(R2)
// Store data               SD R1, R2       ;     memory(R2) = R1 


Control and Flow:
// Jump                     JR 7            ;     goto inst. 7
// Jump if greater than     JGT R2 R3 10    ;     if(R2>R3) goto inst. 10
// Jump if equal            JEQ R1 R2 20    ;     if (R1==R2) goto inst. 20
// Jump if not equal        JNEQ R2 R3 8    ;     if (R2 != R3) goto inst. 8
// END

